name: Python Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 pytest
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true  # Don't fail the build for linting issues
    
    - name: Check code formatting
      run: |
        pip install black
        black --check .
      continue-on-error: true  # Don't fail the build for formatting issues

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: deploy
    
    steps:
    # First checkout the code to have access to scripts
    - uses: actions/checkout@v3
      
    # Install sshpass for password-based SSH authentication
    - name: Install sshpass
      run: sudo apt-get install -y sshpass
      
    # Deploy using direct SSH commands instead of the problematic action
    - name: Deploy via SSH
      env:
        SSH_HOST: ${{ secrets.HOST }}
        SSH_USER: ${{ secrets.USERNAME }}
        SSH_PASS: ${{ secrets.PASSWORD }}
      run: |
        # Create deploy script
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        echo "=== DEPLOYMENT STARTED: $(date) ===" 
        
        # Set the project directory
        PROJECT_DIR="$HOME/telegram-listener"
        echo "Using project directory: $PROJECT_DIR"
        
        # Create directory if it doesn't exist
        if [ ! -d "$PROJECT_DIR" ]; then
          echo "Creating project directory..."
          mkdir -p "$PROJECT_DIR"
          cd "$PROJECT_DIR"
          git clone https://github.com/chanhengseang3/telegram-listener.git .
          echo "Repository cloned successfully."
        else
          # Pull latest changes
          cd "$PROJECT_DIR"
          echo "Pulling latest changes..."
          git fetch --all
          git reset --hard origin/main
          echo "Repository updated successfully."
        fi
        
        # Set up Python environment
        echo "Setting up Python environment..."
        if command -v python3 &>/dev/null; then
          PYTHON_CMD="python3"
        else
          PYTHON_CMD="python"
        fi
        echo "Using $PYTHON_CMD for installation"
        $PYTHON_CMD -m pip install --user --upgrade pip
        $PYTHON_CMD -m pip install --user -r requirements.txt
        echo "Dependencies installed."
        
        # Stop existing bot process if running
        echo "Checking for existing bot process..."
        if pgrep -f "python.*main\.py"; then
          echo "Stopping existing bot process..."
          pkill -f "python.*main\.py"
          sleep 2
          # Force kill if still running
          if pgrep -f "python.*main\.py"; then
            echo "Force killing process..."
            pkill -9 -f "python.*main\.py"
          fi
        else
          echo "No existing bot process found."
        fi
        
        # Start bot with nohup
        echo "Starting telegram bot..."
        cd "$PROJECT_DIR"
        LOG_FILE="bot_$(date +%Y%m%d_%H%M%S).log"
        nohup $PYTHON_CMD main.py > $LOG_FILE 2>&1 &
        
        # Check if bot started successfully
        sleep 5
        if pgrep -f "$PYTHON_CMD.*main\.py"; then
          echo "Bot started successfully!"
          echo "Log file: $PROJECT_DIR/$LOG_FILE"
          tail -n 5 $LOG_FILE
        else
          echo "ERROR: Bot failed to start!"
          echo "Last 20 lines of log file:"
          tail -n 20 $LOG_FILE
          exit 1
        fi
        
        echo "=== DEPLOYMENT COMPLETED: $(date) ==="
        EOL
        
        # Make script executable
        chmod +x deploy.sh
        
        # Run deployment using sshpass for password authentication
        sshpass -p "$SSH_PASS" ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST 'bash -s' < deploy.sh
