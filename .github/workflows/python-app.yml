name: Python Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 pytest
    
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    #   continue-on-error: true  # Don't fail the build for linting issues
    
    - name: Check code formatting
      run: |
        pip install black
        black --check .
      continue-on-error: true  # Don't fail the build for formatting issues

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    # First checkout the code to have access to scripts
    - uses: actions/checkout@v3
      
    # Deploy using SSH
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@master
      with:
        # REQUIRED SECRETS:
        # - HOST: The hostname or IP of your server
        # - USERNAME: SSH username to log in with
        # - PASSWORD or SSH_KEY: Password or private key for authentication
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 22
        script: |
          echo "=== DEPLOYMENT STARTED: $(date) ==="
          
          # Set the project directory (modify this to match your server's path)
          PROJECT_DIR="$HOME/telegram-listener"
          echo "Using project directory: $PROJECT_DIR"
          
          # Create directory if it doesn't exist
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "Creating project directory..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone https://github.com/${{ github.repository }}.git .
            echo "Repository cloned successfully."
          else
            # Pull latest changes
            cd "$PROJECT_DIR"
            echo "Pulling latest changes..."
            git fetch --all
            git reset --hard origin/main
            echo "Repository updated successfully."
          fi
          
          # Set up Python environment
          echo "Setting up Python environment..."
          python -m pip install --user --upgrade pip
          pip install --user -r requirements.txt
          echo "Dependencies installed."
          
          # Stop existing bot process if running
          echo "Checking for existing bot process..."
          if pgrep -f "python main.py"; then
            echo "Stopping existing bot process..."
            pkill -f "python main.py"
            sleep 2
          else
            echo "No existing bot process found."
          fi
          
          # Start bot with nohup
          echo "Starting telegram bot..."
          cd "$PROJECT_DIR"
          nohup python main.py > bot.log 2>&1 &
          
          # Wait briefly and check if process is running
          sleep 3
          if pgrep -f "python main.py"; then
            echo "Bot started successfully!"
            echo "Log file: $PROJECT_DIR/bot.log"
          else
            echo "ERROR: Bot failed to start!"
            echo "--- Last 20 lines of log file ---"
            tail -n 20 bot.log
            exit 1
          fi
          
          echo "=== DEPLOYMENT COMPLETED: $(date) ==="
